public class Demo1 extends Thread{
	private static int i = 20;
	
	@Override
	public void run() {
		while(true) {
			if(i<=0) {
				break;
			}
			System.out.println(Thread.currentThread()+"第"+(i--));
			
			
		}
		
	}
	
  
public static void main(String[] args) {
		Demo1 t1 = new Demo1();
		new Thread(t1,"第一位").start();
		
		Thread t2 = new Thread(new Runnable() {
			
			@Override
			public void run() {
				while(true) {
					if(i<=0) {
						break;
					}
					
  System.out.ppublic class Demo2 extends Frame implements Runnable{

	private int count = 100;
	static Button button = new Button();
	static Demo2 demo2 = new Demo2();
	int r1,r2;
	
	public void random(int i,int j) {
		r1 = (int)(Math.random()*1251);
		r2 = (int)(Math.random()*551);
	}
	
	@Override
	public void run() {
		try {
			while(count>0) {
				count--;
				button.setLabel(count+"");
				Thread.sleep(1000);
				random(0, 0);
				demo2.setLocation(r1,r2);
			}
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
public static void main(String[] args) {
		demo2.setBackground(Color.yellow);
		demo2.setSize(300,300);
		button.setBackground(Color.cyan);
		button.setLabel("60");
		demo2.add(button);
		demo2.setVisible(true);
		Thread thread = new Thread(demo2);
		thread.start();
		
		demo2.addWindowListener(new WindowAdapter() {

			@Override
			public void windowClosing(WindowEvent e) {
				// TODO Auto-generated method stub
				super.windowClosing(e);
				System.out.println("正在关闭...");
				System.exit(0);
			}
		});
	}

}rintln(Thread.currentThread()+"第"+(i--));
				}
				
			}
		},"第二位");
		
		
		t2.start();
	}
	
}

public class Demo4 extends Thread{
	
	@Override
	public void run() {
		System.out.println(Thread.currentThread().getName());
	}
	
	public static void main(String[] args) {
		Demo4 demo4 = new Demo4();
		Thread thread1 = new Thread(demo4,"x");
		Thread thread2 = new Thread(demo4,"y");
		
		//这里可以看出，start()使用后是子线程
		//run()使用后调用则是主线程
		thread1.start();
		thread2.run();
	}

public class Myrunnable implements Runnable{

	int count = 0;
	@Override
	public void run() {
		try {
			while(count<20) {
				Thread.sleep(100);
				count++;
				System.out.println(Thread.currentThread()+"-----"+count);
			}
			
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
	}
	
public class ThreadDemo {
	
	public static void main(String[] args) {
		for(int i = 0 ; i < 10 ;i ++) {
			MyThread thread = new MyThread();
			thread.start();
		}
	}
}
class MyThread extends Thread{
	@Override
	public void run() {
		for(int i = 0; i<3;i++) {
			System.out.println(Thread.currentThread()+"- 正在运行！");
		}
	}
}

public class ThreadDemo1 extends Thread{
	@Override
	public void run() {
		System.out.println("我是线程1");
		super.run();
	}
}

import java.util.Date;

public class Demo {

	public static void main(String[] args) throws ClassNotFoundException {
		//long time=System.currentTimeMillis();
		//System.out.println(time/3600000/24/365);
		
		Date ft = new Date();
		//SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
		//System.out.println(date.format(ft));
		System.out.printf("%tc%n",ft);
		
		
		Class clazz = Cc.class;
		
		Object h = new Cc();
		
		clazz = h.getClass();
		System.out.println(clazz);
		
		clazz = String.class;
		System.out.println(clazz);
	       
	       clazz = "javaTest".getClass();
	       System.out.println(clazz);
	       
	       clazz = Class.forName("java.lang.String");
	       System.out.println(clazz);
	       
	       System.out.println();
	       
	}
	
}
